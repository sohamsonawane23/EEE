section .bss
    num1 resb 1         ; reserve 1 byte for first number
    num2 resb 1         ; reserve 1 byte for second number
    result resb 1       ; reserve 1 byte for result (largest)

section .text
    global _start

_start:
    ; Read first number (1 byte)
    mov eax, 3          ; sys_read
    mov ebx, 0          ; stdin
    mov ecx, num1       ; buffer for num1
    mov edx, 1
    int 0x80

    ; Read second number (1 byte)
    mov eax, 3
    mov ebx, 0
    mov ecx, num2
    mov edx, 1
    int 0x80

    ; Convert ASCII to number
    mov al, [num1]
    sub al, '0'
    mov bl, al           ; store first number in bl

    mov al, [num2]
    sub al, '0'
    mov bh, al           ; store second number in bh

    cmp bl, bh           ; compare first and second number
    mov al, bl           ; al = first number by default
    cmovb al, bh         ; if bl < bh, move bh to al (al = larger)

    add al, '0'          ; convert back to ASCII
    mov [result], al

    ; Output the largest number (1 byte)
    mov eax, 4           ; sys_write
    mov ebx, 1           ; stdout
    mov ecx, result
    mov edx, 1
    int 0x80

    ; Exit
    mov eax, 1           ; sys_exit
    xor ebx, ebx
    int 0x80